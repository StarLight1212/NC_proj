#!/usr/bin/
"""
@Author: Ansehen
@Date: 2022.Jan.13th
@Project for Dr.Fang
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.stats.anova import anova_lm
from statsmodels.formula.api import ols
import listfile as li


def violin_plot(group: list, rc_dict: dict, dtype: str):

    if isinstance(rc_dict, dict) and isinstance(group, list):
        dynamics_df = pd.DataFrame([rc_dict["intact"], rc_dict["control"], \
                            rc_dict["MN"], rc_dict["Gel-EV"], rc_dict["Gel-MSC"], \
                            rc_dict["MN-EV"], rc_dict["MN-MSC"] ], index=group).T
        # dynamics_df.boxplot(grid=False, showmeans=True, patch_artist=True, sym="r*")
        #sns.violinplot(data=dynamics_df, split=True, palette="Set2",scale='width')
        #plt.rcParams['savefig.dpi'] = 300  # 图片像素
        sns.violinplot(data=dynamics_df, split=True, palette="Set2",scale = 'width')
        sns.swarmplot(data=dynamics_df, color="k",size = 3.5)
        plt.ylabel(dtype+"  "+"Amplitude(mV)")
        plt.ylim((-0.15,1.0))
        plt.savefig(r'C:\Users\Giraffe\Desktop\{}.png'.format(dtype),dpi = 3400)
        plt.close()
        #plt.show()

    else:
        raise TypeError("The input value of parameters(group, rc_dict, dtype) should use int type!")


def get_EMG_ocssillation(raw_data: np.ndarray):
    return max(raw_data) - min(raw_data)


def anova_test(re_dict:dict, dtype:str):
    dynamics_df = pd.DataFrame([re_dict["intact"], re_dict["control"], \
                            re_dict["MN"], re_dict["Gel-EV"], re_dict["Gel-MSC"], \
                            re_dict["MN-EV"], re_dict["MN-MSC"] ], index=group).T
    dynamics_df.columns.name = dtype
    data_new = dynamics_df.melt().dropna()
    model = ols('value~C('+dtype+')',data=data_new).fit()
    pair_t = model.t_test_pairwise('C('+dtype+')')
    return anova_lm(model), pair_t.result_frame

#mas
def find_peak(path):
    if path[-5] == '1':
        rawdata_TA = pd.read_csv(path)
        from_ = 0
        to_ = 2500000
        # Get EMG peak in TA muscle
        TA_data = rawdata_TA.values.astype(np.float32)[from_:to_]
        TA_amp = get_EMG_ocssillation(TA_data)
        #print(TA_amp)
        return TA_amp,TA_data
    elif path[-5] == '2':
        rawdata_GS = pd.read_csv(path)
        # indexing
        from_ = 0
        to_ = 2500000
        # Get EMG peak in GS muscle
        GS_data = rawdata_GS.values.astype(np.float32)[from_:to_]
        GS_amp = get_EMG_ocssillation(GS_data)
        print(GS_amp)
        return (GS_amp,GS_data)
def mooaision_intergrate(group_name):
    global TA_dict,GS_dict
    cor_dict = {
        "intact": "intact",
        "B90": "control",
        "C55": "MN",
        'G31': "Gel-EV",
        "E33": "Gel-MSC",
        "A132": "MN-EV",
        "A137": "MN-MSC",
    }
    path = li.command_generate(group_name)
    peak_TA = []
    peak_GS = []
    for i in path:
        peak, TA_data = find_peak(i)
        if i[-5] == '1':
            peak_TA.append(peak.copy())
        elif i[-5] == '2':
            peak_GS.append(peak.copy())
        else:
            print('filaname error')
    # peak_GS = peak_GS.astype(np.float)
    #return peak_TA,peak_GS
    for i in peak_TA:
        print(i)
        TA_dict[cor_dict[group_name]].append(float(i))
    for i in peak_GS:
        print(i)
        GS_dict[cor_dict[group_name]].append(float(i))
    return TA_dict,GS_dict

if __name__ == '__main__':
    # # Load path
    # #rawdata_TA = pd.read_csv("./csv_Recording/Day14/A137/tr30.btn_m_121.csv")
    # rawdata_TA = pd.read_csv('D:\\data\\pack\\Poincare\\Tr1\\File01.btn_m_21.csv')
    # #rawdata_GS = pd.read_csv("./csv_Recording/Day14/A137/tr30.btn_m_122.csv")
    # rawdata_GS = pd.read_csv('D:\\data\\pack\\Poincare\\Tr1\\File01.btn_m_22.csv')
    # # indexing
    # from_ = 0
    # to_ = 2500000
    # # Get EMG peak in TA muscle
    # TA_data = rawdata_TA.values.astype(np.float32)[from_:to_]
    # TA_amp = get_EMG_ocssillation(TA_data)
    # print(TA_amp)
    # # Get EMG peak in GS muscle
    # GS_data = rawdata_GS.values.astype(np.float32)[from_:to_]
    # GS_amp = get_EMG_ocssillation(GS_data)
    # print(GS_amp)

    #mas intergrate

    useless,TA_data = find_peak('D:\\data\\pack\\Poincare\\Tr2\\Trial02.btn_m_31.csv')
    useless,GS_data = find_peak('D:\\data\\pack\\Poincare\\Tr2\\Trial02.btn_m_32.csv')

    # Plot EMG Layer
    plt.plot(range(len(TA_data)), TA_data)
    plt.plot(range(len(GS_data)), GS_data)
    plt.show()

    #print(mooaision_intergrate('B88'))
    TA_dict = {
        "intact": [],
        "control": [],
        "MN": [],
        "Gel-EV": [],
        "Gel-MSC": [],
        "MN-EV": [],
        "MN-MSC": [],
    }
    GS_dict = {
        "intact": [],
        "control": [],
        "MN": [],
        "Gel-EV": [],
        "Gel-MSC": [],
        "MN-EV": [],
        "MN-MSC": [],
    }
    # a,b = mooaision_intergrate('B90')
    # a,b = mooaision_intergrate('B90')
    cor_dict = {
        "intact": "intact",
        "B90": "control",
        "C55": "MN",
        'G31': "Gel-EV",
        "E33": "Gel-MSC",
        "A132": "MN-EV",
        "A137": "MN-MSC",
    }
    #mas
    # for i, key in enumerate(cor_dict.keys()):
    #     a,b = mooaision_intergrate(key)
    # print(a)
    # print(b)

    # # intact = np.matmul(intact1, intact2.T)
    # ta_A137_D14 = {"MN-MSC":[0.37126,0.39965,0.23509,0.153462,0.24791,0.077965,0.44151,0.066434,0.063138,
    #                          0.195806,0.22450301,0.046949,0.079807,0.13025701,0.150894,0.059108,0.058326,
    #                          0.064865,0.076819,0.056843,0.045589,0.51967,0.146918,0.391,0.076378,0.20801,
    #                          0.32162,0.078942,0.20150301,0.115106,0.15100199,0.35477,0.79302,0.127692,
    #                          0.20695,0.48089,0.096894,0.108823,0.13412,0.15431699,0.19106,0.170522,0.8589699,
    #                          0.39691,0.70227003,0.176328,0.14037201,0.71578,0.58045,0.2157,0.33901,0.31522,
    #                          0.39411,0.29239,0.46353,0.063426,0.2893,0.186288,0.163602,0.137742,0.27023,
    #                          0.19549501,0.33679,0.092869,],}
    # print(len(ta_A137_D14["MN-MSC"]))
    #
    # gs_A137_D14 = {"MN-MSC":[1.0521901,1.6963401,1.20855,0.78907,0.84351003,0.75811,0.35168,1.64902,0.55358,0.81448996,
    #                          0.60098,1.03578,0.39723,0.22134,0.59676,1.32909,0.28847,0.31403,0.3372,0.4007,
    #                          0.73266,0.37151,2.11724,0.9175,1.39426,0.63361,0.7516,1.2413,0.58525,0.58403003,0.40052998,
    #                          0.34504998,0.51294,1.1975,1.18185,0.4149,0.60524,1.38442,0.74308,0.96744,0.74402,0.70694,
    #                          0.53774,1.04057,1.4438701,2.00875,1.91863,0.95555,0.39108,2.3856,0.58702004,1.3865299,
    #                          0.95516,0.97878003,0.87063,0.93961,0.99496,0.9343,1.22769,1.35385,1.0191901,0.98103,
    #                          0.52926004,1.35635,0.94114995],}


    # ta_A132_D14 = {"MN":[0.21860701,0.124912,0.2359,0.174503,0.178054,0.2534,0.111199,0.074662,
    #                      0.139641,0.17776501,0.140772,0.216693,0.081966,1.39762,0.141202,0.064582,
    #                      0.069947,0.193553,0.135473,0.21018,0.24351,0.25476,0.204109,0.137573,
    #                      0.30416,0.112202,0.24695,0.103319,0.138235,0.140028,0.105775,0.18450099,
    #                      0.14081499,0.38747,0.17033699,0.174651,0.16779101,0.193121,0.135476,
    #                      0.140397,0.177494,0.28096998,0.41785002,0.161767,0.221296,0.194418,
    #                      0.194418,0.100488,0.154499,0.16214299,0.26041,0.152144,0.196861,0.56924,
    #                      ],}
    #
    # gs_A132_D14 = {"MN": [1.4861901,0.86061,2.5112,0.44317,2.28024,0.59510005,0.50644,2.2336998,2.4772,
    #                       2.7859,3.4144,2.9264998,2.6473,2.3474002,1.28632,2.7178998,1.0966101,
    #                       0.8133,2.8903,1.76935,0.27941,2.5602999,2.438,0.5713,2.0267801,
    #                       0.29793,1.6600299,0.47278,0.29441,0.21776,0.59182,0.24898,1.68259,
    #                       0.59182,0.89594,2.0825,1.292,0.17151901,0.34749,0.33028,0.190824,
    #                       2.1441002,2.0979,2.0019,0.16743201,2.6754,1.58484,0.211015,0.44206,
    #                       1.36854,2.255,0.36313,0.35026002,], }
    #
    #
    #
    # ta_A137_D7 = {"MN-MSC":[0.53881,0.71929,0.41329,2.7427,0.66765,0.63504004,0.39574,0.31225002,
    #                         0.77133,0.45288,0.55778,0.64261,0.44124,0.36674,0.41301,0.50391,0.68965,
    #                         0.49375,0.46493,0.165441,0.50133,0.32726002,0.47832,0.40474,0.43559998,
    #                         0.37748998,0.36187,0.52990997,0.76532996,0.6315,0.56873,0.95268,0.49298,
    #                         0.37254,0.70704997,0.41017002,0.52598,0.46938002,1.14734,0.78253,0.65616,
    #                         0.191891,0.40965,0.7293,0.74571,],}
    #
    # gs_A137_D7 = {"MN-MSC":[0.118954,0.32171,0.193377,0.53046,0.34279,0.60697997,0.33451998,0.37274998,
    #                         0.62299,0.20077801,0.34303,0.24995,0.50932,0.47344,0.19460699,0.46563,0.31579,
    #                         0.48430997,0.55394,0.04898,0.52901,0.198674,0.116885,0.42338002,0.17128101,
    #                         0.26698,0.22558,0.201645,0.39233,0.69267,0.47656998,0.69616,0.66485,
    #                         0.45740998,0.53336,0.45077997,0.69574,0.268648,0.62258005,0.44081,0.64813995,
    #                         0.30468,0.28234,1.79176,0.25261,],}
    #
    #
    #
    #
    # ta_A132_D7 = {"MN": [0.095346, 0.24301, 0.22341001,0.13028, 0.155933,0.27304,0.14327,0.13681701,0.162093,
    #                0.125164,0.210353,0.165669,0.26315,0.12437899,0.18012199,0.173136,0.29346,0.197065,
    #                0.41268998,0.13831499,0.20561099,0.180385,0.158898,0.12585,0.22845,0.191787,
    #              0.31922,0.15618,0.26497,0.39943,0.165793,0.153876,0.14058,0.16698301,0.097027,
    #              0.18993899,0.10974,0.106498,0.2902,0.24320301,0.186124,0.22385001,0.24658,0.20921,
    #              0.26944,0.32118,0.104757,0.179158,0.180351,0.20316601,0.20896,0.33060998,
    #              0.28032,0.152946,0.191077,0.22205001,0.22236,0.29347,0.25362,0.193156,0.183957,
    #              0.39287,0.25227,0.54338,0.39768,0.208057,0.22936301,0.22584,0.21864098,
    #              0.28993,0.16738299,0.22059,0.275,0.27483,0.2423,0.24043,0.231529,0.21105999,],}
    # gs_A132_D7 = {"MN": [0.29680002, 0.40668, 0.170911,0.2052, 0.192985,0.72979,0.02996,0.027915,0.031737,
    #                0.03395,0.227308,0.32429,0.206754,0.24375,0.068927,0.122659,0.040255,0.045131,
    #                0.060099,0.0167421,0.0172129,0.42317998,0.026618,0.030161,0.23507,0.23803,
    #              0.22591001,0.149618,0.026693,0.40377998,0.27183002,0.21932,0.32253,0.0158449,0.08742,
    #              0.187813,0.12190899,0.19128099,0.31911,0.32198,0.28101,0.46564,0.103198,0.041224,
    #              0.22817001,0.29211998,0.0145621,0.102373,0.25498,0.33016002,0.48073,0.22942299,
    #              0.42016,0.24099,0.36306,0.25551,0.37456,0.53498,0.27527,0.2295,0.213592,
    #              0.24293,0.18590501,0.39661,0.091056,0.028237,0.21248001,0.31111002,0.075855,
    #              0.028288,0.23808,0.14519599,0.22146001,0.134332,0.21909,0.09859,0.46605,0.195411],}


    # TA_dict = {
    #             "intact":[0.82323,0.78944004,0.55007005,0.81053996,1.42302,0.83558,0.74218,
    #                     1.38902,1.3115001,1.65395,1.41256,1.27512,1.91451,1.4749,2.0473201,1.34319,1.7117801,
    #                      1.5866201,1.04851,1.30013,1.1504099,1.17608,1.37045,
    #                      1.71617,1.4865,1.0306001,0.89169,1.63725,1.01465,0.88548005,1.38542,
    #                      1.24195,1.0451801,0.9566901,1.01845,0.8805,1.01313,0.81846,
    #                      0.98588,0.91732,0.66525,],
    #
    #            "control":[0.26567,0.078156,0.32595998,0.39925998,0.12253401,0.37141,0.098922,0.08552501,
    #                         0.037235,0.187729,0.22892,0.11251301,0.170617,0.26145,0.2509,0.105186,
    #                         0.024731,0.233205,],
    #
    #            "MN": [0.24301, 0.27304, 0.14327, 0.13681701, 0.162093,
    #                   0.210353, 0.173136, 0.29346, 0.197065,
    #                   0.41268998, 0.20561099, 0.22845,
    #                   0.31922, 0.15618, 0.26497, 0.165793,
    #                   0.18993899, 0.2902, 0.24320301, 0.22385001, 0.20921,
    #                   0.26944, 0.32118, 0.104757, 0.20316601, 0.33060998,
    #                   0.28032, 0.191077, 0.22205001, 0.25362, 0.193156,
    #                   0.39287, 0.25227, 0.54338, 0.39768, 0.21864098,
    #                   0.16738299, 0.275, 0.231529, 0.21105999, ],
    #
    #            "MN-MSC": [0.53881, 0.41329, 0.63504004, 0.39574, 0.31225002,
    #                       0.77133, 0.45288, 0.55778, 0.64261, 0.36674, 0.50391,
    #                       0.49375, 0.47832, 0.40474, 0.43559998,
    #                       0.37748998, 0.52990997, 0.76532996, 0.6315, 0.95268, 0.49298,
    #                       0.37254, 0.70704997, 0.41017002, 0.52598, 0.46938002, 1.14734, 0.78253, 0.65616,
    #                       0.40965, 0.74571, ],
    #            }
    #
    #
    # GS_dict = {
    #             "intact":[0.37026,0.23699999,0.21695,0.21950999,
    #                     0.25814,0.37031,0.34335,0.22194,0.35543,0.32020998,0.35543,
    #                      0.2909,0.34245998,0.27051002,0.23828,0.43473,
    #                      0.26059002,0.32695,0.29627,0.27129,0.45957,0.3391,0.31852,0.29089,
    #                      0.21316999,0.24405,0.34203,0.30888999,0.33442998,0.40914,0.43247998,0.44362,
    #                      0.34947002,0.31738,0.22367999,0.27021,0.29067,0.48073,0.46564,
    #                      0.29244,0.46605,],
    #
    #            "control":[0.22547,0.36482,0.29632002,0.33278,0.36922002,0.188978,
    #                         0.27257,0.130311,0.31356,0.32946998,
    #                         0.35192,0.23997,0.33218002,0.134332,0.12190899,0.103198,0.149618,
    #                       0.103198,],
    #
    #            "MN": [0.29680002, 0.40668, 0.2052, 0.192985, 0.227308, 0.32429, 0.206754, 0.24375,
    #                    0.42317998, 0.23507, 0.23803, 0.22591001, 0.40377998,0.27183002,0.21932,0.32253,
    #                  0.187813,0.19128099,0.31911,0.32198,0.28101,
    #                  0.22817001,0.29211998,0.25498,0.33016002,0.22942299,
    #                  0.42016,0.24099,0.36306,0.25551,0.37456, 0.24293,0.18590501,0.39661,0.21248001,0.31111002,
    #                  0.23808,0.22146001,0.21909,0.195411],
    #
    #            "MN-MSC":[0.32171,0.193377,0.34279,0.33451998,0.37274998,
    #                         0.20077801,0.34303,0.24995,0.47344,0.19460699,0.46563,0.31579,
    #                         0.48430997,0.198674,0.42338002,0.17128101,
    #                         0.26698,0.22558,0.201645,0.39233,0.47656998,0.27527,0.2295,0.213592,
    #                         0.45740998,0.45077997,0.268648,0.44081,0.30468,0.28234,0.25261,],
    #            }
    TA_dict = {"intact":[0.82323,0.78944004,0.55007005,0.81053996,1.42302,0.83558,0.74218,
                        1.38902,1.3115001,1.65395,1.41256,1.27512,1.91451,1.4749,2.0473201,1.34319,1.7117801,
                         1.5866201,1.04851,1.30013,1.1504099,1.17608,1.37045,
                         1.71617,1.4865,1.0306001,0.89169,1.63725,1.01465,0.88548005,1.38542,
                         1.24195,1.0451801,0.9566901,1.01845,0.8805,1.01313,0.81846,
                         0.98588,0.91732,0.66525,],
               'control': [0.18478599190711975, 0.14311200380325317, 0.15733599662780762, 0.12779100239276886, 0.10844999551773071, 0.12814199924468994],
               'MN': [ 0.05522000044584274, 0.06726600229740143, 0.04747699946165085, 0.05783599987626076, 0.04695099964737892, 0.06720700114965439],
               'Gel-EV': [0.2818800210952759, 0.4703100323677063, 0.12546899914741516, 0.21673500537872314, 0.38590002059936523, 0.23822999000549316, 0.14375799894332886, 0.1669270098209381, 0.5748299956321716],
               'Gel-MSC': [0.13140800595283508, 0.4018300175666809, 0.1581290066242218, 0.2284500002861023, 0.325219988822937, 0.3067399859428406, 0.2246600091457367, 0.2098190039396286, 0.4144899845123291],
               'MN-EV': [ 0.2430099993944168, 0.2730399966239929,  0.2642100155353546, 0.29346001148223877,0.18038499355316162, 0.31922000646591187, 0.26497000455856323, 0.24597999453544617, 0.21988999843597412, 0.29019999504089355, 0.22385001182556152, 0.24658000469207764, 0.20524001121520996, 0.2803199887275696, 0.19107699394226074, 0.2220500111579895,  0.2018290013074875, 0.22236000001430511, 0.29346999526023865, 0.2536199986934662, 0.19315600395202637, 0.18395699560642242, 0.25227001309394836, 0.2080570012331009, 0.22936300933361053, 0.2258400022983551, 0.2186409831047058, 0.28992998600006104,0.2205899953842163, 0.2750000059604645, 0.27483001351356506, 0.24230000376701355, 0.24042999744415283, 0.23152899742126465, 0.21105998754501343],
               'MN-MSC': [0.719290018081665, 0.7713299989700317, 0.6426100134849548, 0.6896499991416931, 0.5422400236129761, 0.6451799869537354, 0.5299099683761597, 0.7653299570083618, 0.9526799917221069, 0.7070499658584595, 1.1473400592803955, 0.6561599969863892, 0.7973700165748596]}

    GS_dict = {'intact': [0.37026,0.23699999,0.21695,0.21950999,
                       0.25814,0.37031,0.34335,0.22194,0.35543,0.32020998,0.35543,
                        0.2909,0.34245998,0.27051002,0.23828,0.43473,
                         0.26059002,0.32695,0.29627,0.27129,0.45957,0.3391,0.31852,0.29089,
                         0.21316999,0.24405,0.34203,0.30888999,0.33442998,0.40914,0.43247998,0.44362,
                         0.34947002,0.31738,0.22367999,0.27021,0.29067,0.48073,0.46564,
                         0.29244,0.46605],
               'control': [0.2215700000524521, 0.2220900058746338, 0.22588999569416046, 0.09944699704647064, 0.11026400327682495, 0.13018900156021118],
               'MN': [ 0.18158501386642456, 0.13419100642204285, 0.102960005402565, 0.09043100476264954, 0.10022900253534317],
               'Gel-EV': [0.22139999270439148, 0.34130001068115234,0.35343998670578003, 0.34650999307632446, 0.3015400171279907],
               'Gel-MSC': [ 0.2796400189399719, 0.22942999005317688, 0.21371999382972717, 0.23675000667572021, 0.22470000386238098, 0.2610200047492981, 0.301859974861145, 0.3746199905872345],
               'MN-EV': [ 0.324290007352829, 0.1569480001926422,0.24852001667022705, 0.149617999792099, 0.23533999919891357, 0.19128099083900452, 0.32973000407218933, 0.30667999386787415, 0.29211997985839844, 0.3301600217819214, 0.14824199676513672, 0.2719799876213074, 0.37455999851226807,  0.2752699851989746, 0.22949999570846558, 0.21359199285507202, 0.27261000871658325, 0.39660999178886414, 0.18590500950813293,0.3549099862575531, 0.3111100196838379, 0.2380799949169159, 0.14519599080085754, 0.2214600145816803, 0.13433200120925903, 0.21908999979496002, 0.19541099667549133],
               'MN-MSC': [0.3217099905014038,  0.34303000569343567,  0.4656299948692322, 0.4233800172805786, 0.4536600112915039, 0.45740997791290283]}

    group = ["intact", "control", "MN", "Gel-EV","Gel-MSC","MN-EV","MN-MSC"]
    violin_plot(group=group,rc_dict=TA_dict,dtype="TA")
    print(anova_test(re_dict=TA_dict,dtype="TA"))
    violin_plot(group=group,rc_dict=GS_dict,dtype="GS")
    print(anova_test(re_dict=GS_dict,dtype="GS"))
    TA_df = pd.DataFrame([TA_dict["intact"],TA_dict["control"],TA_dict["MN"],
                        TA_dict["Gel-EV"],TA_dict["Gel-MSC"],TA_dict["MN-EV"],TA_dict["MN-MSC"]]).T


    # print(len(TA_dict["intact"])==len(GA_dict["intact"]))
    #
    #
    # intact_df = pd.DataFrame(intact)

